{"version":3,"sources":["Components/Header.jsx","Components/Footer.jsx","Components/Interval.jsx","Components/Note.jsx","Components/Description.jsx","Components/CreateArea.jsx","Components/App.jsx","index.js"],"names":["Header","Footer","year","Date","getFullYear","Timer","useState","minutes","setMinutes","isActive","setIsActive","useEffect","interval","setInterval","clearInterval","className","style","color","backgroundColor","onClick","Note","props","title","content","Interval","onDelete","id","Description","CreateArea","isExpanded","setExpanded","note","setNote","handleChange","event","target","name","value","prevNote","onChange","placeholder","rows","Zoom","in","Fab","onAdd","preventDefault","App","notes","setNotes","deleteNote","prevNotes","filter","noteItem","index","newNote","map","key","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8be3d9d7.chunk.js","sourcesContent":["import React from \"react\";\nimport NoteAddIcon from \"@material-ui/icons/NoteAdd\";\n\nfunction Header() {\n    return (\n        <header>\n            <h1>\n                <NoteAddIcon />\n                Task Time-boxer (version 1.0)\n            </h1>\n        </header>\n    );\n}\n\nexport default Header;\n","import React from \"react\";\n\nfunction Footer() {\n    const year = new Date().getFullYear();\n    return (\n        <footer>\n            <p>Copyright ⓒ {year}</p>\n        </footer>\n    );\n}\n\nexport default Footer;\n","import React, { useState, useEffect } from \"react\";\nimport PlayArrowIcon from \"@material-ui/icons/PlayArrow\";\nimport PauseIcon from \"@material-ui/icons/Pause\";\nimport Reset from \"@material-ui/icons/RotateLeft\";\n\nconst Timer = () => {\n    // minutes will store the value of our timer\n    // isActive will store the timer’s state for whether it is currently timing or paused.\n    const [minutes, setMinutes] = useState(60);\n    const [isActive, setIsActive] = useState(false);\n\n    // toggle function will change the value of isActive to be the opposite of what it currently is.\n    function toggle() {\n        setIsActive(!isActive);\n    }\n\n    // function to reset back to default of 30 mins\n    function reset() {\n        setMinutes(60);\n        setIsActive(false);\n    }\n    //use the useEffect React Hook to detect when isActive is true and start the timer inside of that function\n    useEffect(() => {\n        // Firstly, initialize a new variable interval to null.\n        let interval = null;\n        // detect if isActive is true. If it is, we assign the previously created interval variable to a new interval that triggers every 1,000 milliminutes.\n        if (isActive) {\n            interval = setInterval(() => {\n                //increment the minutes value by one.\n                setMinutes((minutes) => minutes - 1);\n            }, 60000);\n        } else if (!isActive && minutes !== 0) {\n            clearInterval(interval);\n        }\n        // The below return is the equivalent of calling componentWillUnmount in a React Class component.\n        return () => clearInterval(interval);\n    }, [isActive, minutes]);\n\n    return (\n        <div className=\"app\">\n            <div className=\"time\">{minutes} min(s)</div>\n            <div className=\"row\">\n                <button\n                    style={{ color: \"black\", backgroundColor: \"white\" }}\n                    className={`button button-primary button-primary-${\n                        isActive ? \"active\" : \"inactive\"\n                    }`}\n                    onClick={toggle}\n                >\n                    {isActive ? <PauseIcon /> : <PlayArrowIcon />}\n                </button>\n                <button\n                    style={{ color: \"black\", backgroundColor: \"white\" }}\n                    className=\"button\"\n                    onClick={reset}\n                >\n                    <Reset />\n                </button>\n            </div>\n        </div>\n    );\n};\n\nexport default Timer;\n","import React from \"react\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport Interval from \"./Interval\";\n\nfunction Note(props) {\n    function handleClick() {\n        //\n        props.onDelete(props.id); // will trigger the function in app.jsx\n    }\n\n    return (\n        <div className=\"note\">\n            <h1>{props.title}</h1>\n            <p>{props.content}</p>\n\n            <Interval />\n\n            <button\n                style={{ color: \"red\", backgroundColor: \"white\" }}\n                onClick={handleClick}\n            >\n                <DeleteIcon />\n            </button>\n        </div>\n    );\n}\n\nexport default Note;\n","import React from \"react\";\n\nfunction Description() {\n    return (\n        <div className=\"description\">\n            <h1>\n                A simple app to add multiple tasks and a countdown timer to\n                timebox & drive outcomes.\n            </h1>\n        </div>\n    );\n}\n\nexport default Description;\n","import React, { useState } from \"react\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport Fab from \"@material-ui/core/Fab\";\nimport Zoom from \"@material-ui/core/Zoom\";\n\nfunction CreateArea(props) {\n    // establish a constant for tracking the state of the note area\n    // to see if it needs expanding when addinga note\n    const [isExpanded, setExpanded] = useState(false);\n\n    // statefull constants for both title and content\n    // set initial state to blank values\n    const [note, setNote] = useState({\n        title: \"\",\n        content: \"\",\n    });\n\n    function handleChange(event) {\n        // destruture to hold the name and the value when the input changes\n        const { name, value } = event.target;\n\n        // use the name and value to setNote\n        setNote((prevNote) => {\n            return {\n                // now return all the prevous notes and add the newone\n                ...prevNote,\n                // require the [name] as opposed to name to ensure it references\n                // the name constant above. This is how REACT works\n                [name]: value,\n            };\n        });\n    }\n\n    function submitNote(event) {\n        props.onAdd(note);\n        // clear the note to ensure we go back to the placeholder text\n        setNote({\n            title: \"\",\n            content: \"\",\n        });\n        // prevent reloading of screen\n        event.preventDefault();\n    }\n\n    function expand() {\n        // set expanded to true\n        setExpanded(true);\n    }\n\n    return (\n        <div>\n            <form className=\"create-note\">\n                {isExpanded ? (\n                    <input\n                        name=\"title\"\n                        onChange={handleChange}\n                        value={note.title}\n                        placeholder=\"Note title\"\n                    />\n                ) : null}\n                <textarea\n                    name=\"content\"\n                    onClick={expand}\n                    onChange={handleChange}\n                    value={note.content}\n                    placeholder=\"Add your note...\"\n                    rows={isExpanded ? 3 : 1}\n                />\n                <input\n                    name=\"Duration\"\n                    // placeholder=\"Duration countdown... NOT IMPLEMENTED YET\"\n                />\n\n                <Zoom in={isExpanded}>\n                    <Fab onClick={submitNote}>\n                        <AddIcon />\n                    </Fab>\n                </Zoom>\n            </form>\n        </div>\n    );\n}\n\nexport default CreateArea;\n","import React, { useState } from \"react\";\nimport Header from \"./Header\";\nimport Footer from \"./Footer\";\nimport Note from \"./Note\";\nimport Description from \"./Description\";\nimport CreateArea from \"./CreateArea\";\n// import Timer from \"./Timer\";\n// import Interval from \"./Interval\";\n\nfunction App() {\n    // an array of notes constant to track state\n    const [notes, setNotes] = useState([]);\n\n    // recenve the new note to this function\n    function addNote(newNote) {\n        setNotes((prevNotes) => {\n            // add to the notes array via the spread array.\n            return [...prevNotes, newNote];\n        });\n    }\n\n    // id of the note to be deleted\n    function deleteNote(id) {\n        // get hold of previous notes array\n        setNotes((prevNotes) => {\n            return prevNotes.filter((noteItem, index) => {\n                // keep everything but the index id we want to delete\n                return index !== id;\n            });\n        });\n    }\n\n    return (\n        <div>\n            <Header />\n            <Description />\n            {/* <Timer /> */}\n            {/* <Interval /> */}\n\n            <CreateArea onAdd={addNote} />\n            {notes.map((noteItem, index) => {\n                return (\n                    <Note\n                        key={index}\n                        id={index}\n                        title={noteItem.title}\n                        content={noteItem.content}\n                        onDelete={deleteNote}\n                    />\n                );\n            })}\n            <Footer />\n        </div>\n    );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./Components/App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}