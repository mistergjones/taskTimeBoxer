{"version":3,"sources":["Components/Header.jsx","Components/Footer.jsx","Components/Note.jsx","Components/Description.jsx","Components/CreateArea.jsx","Components/App.jsx","index.js"],"names":["Header","Footer","year","Date","getFullYear","Note","props","className","title","content","onClick","onDelete","id","Description","CreateArea","useState","note","setNote","handleChange","event","target","name","value","prevNote","onChange","placeholder","rows","onAdd","preventDefault","App","notes","setNotes","deleteNote","prevNotes","filter","noteItem","index","newNote","map","key","ReactDOM","render","document","getElementById"],"mappings":"0JAUeA,MARf,WACI,OACI,gCACI,yDCMGC,MATf,WACI,IAAMC,GAAO,IAAIC,MAAOC,cACxB,OACI,gCACI,+CAAgBF,KCWbG,MAff,SAAcC,GAMV,OACI,yBAAKC,UAAU,QACX,4BAAKD,EAAME,OACX,2BAAIF,EAAMG,SACV,4BAAQC,QAThB,WAEIJ,EAAMK,SAASL,EAAMM,MAOjB,YCDGC,MATf,WACI,OACI,yBAAKN,UAAU,eAAf,8FAE2B,M,cC0DpBO,MA9Df,SAAoBR,GAAO,MAGCS,mBAAS,CAC7BP,MAAO,GACPC,QAAS,KALU,mBAGhBO,EAHgB,KAGVC,EAHU,KAQvB,SAASC,EAAaC,GAAO,MAEDA,EAAMC,OAAtBC,EAFiB,EAEjBA,KAAMC,EAFW,EAEXA,MAGdL,GAAQ,SAACM,GACL,OAAO,2BAEAA,GAFP,kBAKKF,EAAOC,OAgBpB,OACI,6BACI,8BACI,2BACID,KAAK,QACLG,SAAUN,EACVI,MAAON,EAAKR,MACZiB,YAAY,UAEhB,8BACIJ,KAAK,UACLG,SAAUN,EACVI,MAAON,EAAKP,QACZgB,YAAY,iBACZC,KAAK,MAET,2BACIL,KAAK,WACLI,YAAY,2CAGhB,4BAAQf,QAhCpB,SAAoBS,GAChBb,EAAMqB,MAAMX,GAEZC,EAAQ,CACJT,MAAO,GACPC,QAAS,KAGbU,EAAMS,mBAwBE,UCNDC,MA7Cf,WAAe,MAEed,mBAAS,IAFxB,mBAEJe,EAFI,KAEGC,EAFH,KAaX,SAASC,EAAWpB,GAEhBmB,GAAS,SAACE,GACN,OAAOA,EAAUC,QAAO,SAACC,EAAUC,GAE/B,OAAOA,IAAUxB,QAK7B,OACI,6BACI,kBAAC,EAAD,MACA,kBAAC,EAAD,MAEA,kBAAC,EAAD,CAAYe,MAvBpB,SAAiBU,GACbN,GAAS,SAACE,GAEN,MAAM,GAAN,mBAAWA,GAAX,CAAsBI,UAqBrBP,EAAMQ,KAAI,SAACH,EAAUC,GAClB,OACI,kBAAC,EAAD,CACIG,IAAKH,EACLxB,GAAIwB,EACJ5B,MAAO2B,EAAS3B,MAChBC,QAAS0B,EAAS1B,QAClBE,SAAUqB,OAItB,kBAAC,EAAD,QC3CZQ,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.9d03c6fd.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Header() {\n    return (\n        <header>\n            <h1>Task Time-boxer Ver 0.1</h1>\n        </header>\n    );\n}\n\nexport default Header;\n","import React from \"react\";\n\nfunction Footer() {\n    const year = new Date().getFullYear();\n    return (\n        <footer>\n            <p>Copyright â“’ {year}</p>\n        </footer>\n    );\n}\n\nexport default Footer;\n","import React from \"react\";\n\nfunction Note(props) {\n    function handleClick() {\n        //\n        props.onDelete(props.id); // will trigger the function in app.jsx\n    }\n\n    return (\n        <div className=\"note\">\n            <h1>{props.title}</h1>\n            <p>{props.content}</p>\n            <button onClick={handleClick}>DELETE</button>\n        </div>\n    );\n}\n\nexport default Note;\n","import React from \"react\";\n\nfunction Description() {\n    return (\n        <div className=\"description\">\n            Stop procrastinating..simply add some tasks and a countdown timer to\n            keep driving outcomes.{\" \"}\n        </div>\n    );\n}\n\nexport default Description;\n","import React, { useState } from \"react\";\n\nfunction CreateArea(props) {\n    // statefull constants for both title and content\n    // set initial state to blank values\n    const [note, setNote] = useState({\n        title: \"\",\n        content: \"\",\n    });\n\n    function handleChange(event) {\n        // destruture to hold the name and the value when the input changes\n        const { name, value } = event.target;\n\n        // use the name and value to setNote\n        setNote((prevNote) => {\n            return {\n                // now return all the prevous notes and add the newone\n                ...prevNote,\n                // require the [name] as opposed to name to ensure it references\n                // the name constant above. This is how REACT works\n                [name]: value,\n            };\n        });\n    }\n\n    function submitNote(event) {\n        props.onAdd(note);\n        // clear the note to ensure we go back to the placeholder text\n        setNote({\n            title: \"\",\n            content: \"\",\n        });\n        // prevent reloading of screen\n        event.preventDefault();\n    }\n\n    return (\n        <div>\n            <form>\n                <input\n                    name=\"title\"\n                    onChange={handleChange}\n                    value={note.title}\n                    placeholder=\"Title\"\n                />\n                <textarea\n                    name=\"content\"\n                    onChange={handleChange}\n                    value={note.content}\n                    placeholder=\"Take a note...\"\n                    rows=\"3\"\n                />\n                <input\n                    name=\"Duration\"\n                    placeholder=\"Duration (minutes) NOT IMPLEMENTED YET\"\n                />\n\n                <button onClick={submitNote}>Add</button>\n            </form>\n        </div>\n    );\n}\n\nexport default CreateArea;\n","import React, { useState } from \"react\";\nimport Header from \"./Header\";\nimport Footer from \"./Footer\";\nimport Note from \"./Note\";\nimport Description from \"./Description\";\nimport CreateArea from \"./CreateArea\";\n\nfunction App() {\n    // an array of notes constant to track state\n    const [notes, setNotes] = useState([]);\n\n    // recenve the new note to this function\n    function addNote(newNote) {\n        setNotes((prevNotes) => {\n            // add to the notes array via the spread array.\n            return [...prevNotes, newNote];\n        });\n    }\n\n    // id of the note to be deleted\n    function deleteNote(id) {\n        // get hold of previous notes array\n        setNotes((prevNotes) => {\n            return prevNotes.filter((noteItem, index) => {\n                // keep everything but the index id we want to delete\n                return index !== id;\n            });\n        });\n    }\n\n    return (\n        <div>\n            <Header />\n            <Description />\n\n            <CreateArea onAdd={addNote} />\n            {notes.map((noteItem, index) => {\n                return (\n                    <Note\n                        key={index}\n                        id={index}\n                        title={noteItem.title}\n                        content={noteItem.content}\n                        onDelete={deleteNote}\n                    />\n                );\n            })}\n            <Footer />\n        </div>\n    );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./Components/App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n//CHALLENGE:\n//1. Implement the add note functionality.\n//- Create a constant that keeps track of the title and content.\n//- Pass the new note back to the App.\n//- Add new note to an array.\n//- Take array and render seperate Note components for each item.\n\n//2. Implement the delete note functionality.\n//- Callback from the Note component to trigger a delete function.\n//- Use the filter function to filter out the item that needs deletion.\n//- Pass a id over to the Note component, pass it back to the App when deleting.\n\n//This is the end result you're aiming for:\n//https://pogqj.csb.app/\n"],"sourceRoot":""}